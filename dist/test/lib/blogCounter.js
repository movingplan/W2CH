(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

describe("Counter component", function () {
  it("can write slug in local storage when user visits article if it's not been visited", function () {
    var local = {
      items: {
        visited_articles: "[\"a\", \"b\" ]"
      },
      getItem: function getItem(name) {
        return this.items[name];
      },
      setItem: function setItem(name, value) {
        this.items[name] = value;
      }
    };
    var component = new CounterComponent(local);
    component.visit(["tipps-zum-umzug-schweiz", "test"]);
    expect(component.countOfReadArticles()).toBe(3);
  });
  it("can not write same slug in local if article was already visited", function () {
    var local = {
      items: {
        visited_articles: "[\"tipps-zum-umzug-schweiz\", \"b\" ]"
      },
      getItem: function getItem(name) {
        return this.items[name];
      },
      setItem: function setItem(name, value) {
        this.items[name] = value;
      }
    };
    var component = new CounterComponent(local);
    component.visit(["tipps-zum-umzug-schweiz"]);
    component.visit(["tipps-zum-umzug-schweiz"]);
    expect(component.countOfReadArticles()).toBe(2);
  });
  it("should raise event after more then 3 different articles attempted to be visited", function () {
    var local = {
      items: {
        visited_articles: "[\"TEST1\", \"TEST2\", \"TEST44\"]"
      },
      getItem: function getItem(name) {
        return this.items[name];
      },
      setItem: function setItem(name, value) {
        this.items[name] = value;
      }
    };
    var component = new CounterComponent(local);
    spyOn(component, "openLightBox");
    component.visit(["tipps-zum-umzug-schweiz", "test"]);
    expect(component.countOfReadArticles()).toBe(3);
    expect(component.openLightBox).toHaveBeenCalled();
  });
  it("should count only urls which contain 'tipps-zum-umzug-schweiz' and do not contain 'categories' as part of path array ", function () {
    var local = {
      items: {
        visited_articles: "[\"TEST1\", \"TEST2\", \"TEST44\"]"
      },
      getItem: function getItem(name) {
        return this.items[name];
      },
      setItem: function setItem(name, value) {
        this.items[name] = value;
      }
    };
    var component = new CounterComponent(local);
    spyOn(component, "openLightBox");
    var path = ["tipps-zum-umzug-schweiz", "test"];
    component.visit(path);
    expect(component.countOfReadArticles()).toBe(3);
    expect(component.openLightBox).toHaveBeenCalled();
  });
  it("should ignore URL slugs which contains tipps-zum-umzug-schweiz along with categories", function () {
    var local = {
      items: {
        visited_articles: "[\"TEST1\", \"TEST2\", \"TEST44\"]"
      },
      getItem: function getItem(name) {
        return this.items[name];
      },
      setItem: function setItem(name, value) {
        this.items[name] = value;
      }
    };
    var component = new CounterComponent(local);
    var path = ["tipps-zum-umzug-schweiz", "categories"];
    expect(function () {
      return component.ignoreUrlIfNeeded(path);
    }).toThrow();
  });
  it("should ignore any path that does not contain 'tipps-zum-umzug-schweiz' as part of URL", function () {
    var local = {
      items: {
        visited_articles: "[\"TEST1\", \"TEST2\", \"TEST44\"]"
      },
      getItem: function getItem(name) {
        return this.items[name];
      },
      setItem: function setItem(name, value) {
        this.items[name] = value;
      }
    };
    var component = new CounterComponent(local);
    var path = ["anything"];
    expect(function () {
      return component.ignoreUrlIfNeeded(path);
    }).not.toThrow();
  });
  it("should ignore root url '/tipps-zum-umzug-schweiz' ", function () {
    var local = {
      items: {
        visited_articles: null
      },
      getItem: function getItem(name) {
        return this.items[name];
      },
      setItem: function setItem(name, value) {
        this.items[name] = value;
      }
    };
    var component = new CounterComponent(local);
    var path = ["tipps-zum-umzug-schweiz"];
    component.visit(path);
    expect(component.countOfReadArticles()).toBe(0);
  });
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
